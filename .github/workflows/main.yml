name: Email on Commit

on:
  push:
    branches:
      - main

jobs:
  send-email:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Requirements
        run: pip install yagmail

      - name: Get Commit Metadata and Changed Files
        run: |
          echo "COMMIT_FILES_STR=$(git show --pretty='' --name-only HEAD | paste -sd ',' -)" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE_STR<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=%B HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_STR=$(git log -1 --pretty=format:'%an' HEAD)" >> $GITHUB_ENV
          echo "COMMIT_TIMESTAMP_STR=$(git log -1 --pretty=format:'%ad' --date=format:'%Y-%m-%d %H:%M:%S %Z' HEAD)" >> $GITHUB_ENV

      - name: Send Email with HTML Template
        env:
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASS }}
          EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
          COMMIT_FILES_STR: ${{ env.COMMIT_FILES_STR }}
          COMMIT_MESSAGE_STR: ${{ env.COMMIT_MESSAGE_STR }}
          COMMIT_AUTHOR_STR: ${{ env.COMMIT_AUTHOR_STR }}
          COMMIT_TIMESTAMP_STR: ${{ env.COMMIT_TIMESTAMP_STR }}
        run: |
          python <<EOF
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import html

EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_PORT = int(os.environ['EMAIL_PORT'])
EMAIL_USER = os.environ['EMAIL_USER']
EMAIL_PASSWORD = os.environ['EMAIL_PASSWORD']
recipients = [r.strip() for r in os.environ['EMAIL_RECIPIENTS'].split(',') if r.strip()]

repo_full_name = os.environ.get('GITHUB_REPOSITORY', 'unknown/repo')
commit_sha = os.environ.get('GITHUB_SHA', 'unknownsha')
server_url = os.environ.get('GITHUB_SERVER_URL', 'https://github.com')

files_str = os.environ.get('COMMIT_FILES_STR', '')
commit_message = os.environ.get('COMMIT_MESSAGE_STR', 'No commit message found.').strip()
commit_author = os.environ.get('COMMIT_AUTHOR_STR', 'N/A')
commit_timestamp = os.environ.get('COMMIT_TIMESTAMP_STR', 'N/A')
commit_subject = commit_message.splitlines()[0] if commit_message.splitlines() else "Commit Update"

# Process changed files
changed_files = [f.strip() for f in files_str.split(',') if f.strip()]
file_blob_links = [
    f"{server_url}/{repo_full_name}/blob/{commit_sha}/{file}" for file in changed_files
]
list_items_html = "\\n".join(
    f"<li><a href='{url}' target='_blank'>{html.escape(name)}</a></li>"
    for name, url in zip(changed_files, file_blob_links)
) or "<li>No files were changed in this commit.</li>"

# Load template
with open("html-template.html", "r", encoding="utf-8") as file:
    html_template = file.read()

html_content = html_template.format(
    repo_full_name=repo_full_name,
    commit_author=commit_author,
    commit_timestamp=commit_timestamp,
    commit_sha=commit_sha,
    server_url=server_url,
    commit_message=html.escape(commit_message),
    list_items_html=list_items_html
)

# Create email
msg = MIMEMultipart()
msg['From'] = EMAIL_USER
msg['To'] = ", ".join(recipients)
msg['Subject'] = f"üöÄ Commit: {commit_subject[:60]}{'...' if len(commit_subject) > 60 else ''}"
msg.attach(MIMEText(html_content, 'html'))

# Send email
try:
    with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASSWORD)
        server.sendmail(EMAIL_USER, recipients, msg.as_string())
    print("‚úÖ Email sent successfully!")
except Exception as e:
    print(f"‚ùå Failed to send email: {e}")
    import traceback
    traceback.print_exc()
    exit(1)
EOF
